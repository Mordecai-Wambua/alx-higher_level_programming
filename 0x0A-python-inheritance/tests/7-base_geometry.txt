===================================
Test cases for class BaseGeometry:
===================================
``area(self)`` - raises an Exception with the message area() is not implemented
``integer_validator(self, name, value)`` - validates value

::
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

::
#test for area method
>>> try:
...     print(bg.area())
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[Exception] area() is not implemented

#test for integer_validation method
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
  ...
TypeError: name must be an integer


#test for normal functionality
::
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> try:
...     print(bg.area())
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
...
[Exception] area() is not implemented

::
#test for wrong argument type
>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
  ...
TypeError: name must be an integer

::
#test for wrong value range
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
  ...
ValueError: age must be greater than 0

::
#test for no arguments
>>> bg.integer_validator()
Traceback (most recent call last):
  ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

::
#test for single argument
>>> bg.integer_validator("Home")
Traceback (most recent call last):
  ...
TypeError: integer_validator() missing 1 required positional argument: 'value'
