=============================
How to Use 100-matrix_mul.py
=============================

defines usage of the function ``matrix_mul(m_a, m_b)``


Test cases:
===========
``matrix_mul(m_a, m_b)`` returns result of multiplying the 2 matrices

::
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

::
#test for normal functioning
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
[[7, 10], [15, 22]]

>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
[[13, 16]]

#test for wrong arguments
>>> matrix_mul([[]], [[3, 4], [5, 6]])
Traceback (most recent call last):
  ...
ValueError: m_a can't be empty

>>> matrix_mul([[3,45]], [[]])
Traceback (most recent call last):
  ...
ValueError: m_b can't be empty

>>> matrix_mul([[3,45]], [])
Traceback (most recent call last):
  ...
ValueError: m_b can't be empty

>>> matrix_mul([[3,45]], None)
Traceback (most recent call last):
  ...
TypeError: m_b must be a list

>>> matrix_mul([[3,45]], (3,))
Traceback (most recent call last):
  ...
TypeError: m_b must be a list

>>> matrix_mul([[3,45]], )
Traceback (most recent call last):
  ...
TypeError: matrix_mul() missing 1 required positional argument: 'm_b'

>>> matrix_mul( )
Traceback (most recent call last):
  ...
TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

>>> matrix_mul([[3,45]], [[3, 4], [5, 6]])
[[234, 282]]
>>> matrix_mul((43,), [[3, 4], [5, 6]])
Traceback (most recent call last):
  ...
TypeError: m_a must be a list

>>> matrix_mul({4:"four"}, [[3, 4], [5, 6]])
Traceback (most recent call last):
  ...
TypeError: m_a must be a list
